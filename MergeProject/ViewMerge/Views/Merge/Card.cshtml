@using MergeLib;
@model UserView
@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Card №" + Model.Id.ToString();
}

@{
    string fieldCssClass = "col-md-2";
    string valueCssClass = "col-md-2";
    MemberHelper<UserView> memberHelper = new MemberHelper<UserView>();
}

<style>
    label {
        display: block;
    }

    label.error {
        color: red;
    }
    .title-card {
        color: #af853d;
    }
    #alert-container {
        position: absolute;
        right: 60px;
    }
</style>

<fieldset>
    <div id="alert-container" class="alert alert-warning alert-dismissible hide" role="alert">
        <div id="alert-title"></div>
    </div>
    <div id="user">
        <form id="form" method="post" action="@Url.Action("Card","Merge")"> 
            <div class="form-group">
                <h2>Card: <span class="title-card">{{getFIO}}</span></h2>
            </div>
            <div class="form-group">
                <label class="@fieldCssClass" for="lname">LastName</label>
                <input class="@valueCssClass form-control" id="lname" 
                       name="@memberHelper.GetName(x=>x.LastName)"  type="text" v-model="lastName"/>
            </div>
            <div class="form-group">
                <label class="@fieldCssClass" for="fname">FirstName</label>
                <input class="@valueCssClass form-control" id="fname" 
                       name="@memberHelper.GetName(x=>x.FirstName)"  type="text" v-model="firstName" />
            </div>
            <div class="form-group">
                <label class="@fieldCssClass" for="mname">MiddleName</label>
                <input class="@valueCssClass form-control" id="mname"
                       name="@memberHelper.GetName(x=>x.MiddleName)"  type="text" v-model="middleName" />
            </div>

            <div class="form-group">
                <label class="@fieldCssClass" for="birthDay">BirthDay</label>
                <input class="@valueCssClass form-control" id="birthDay" 
                       name="@memberHelper.GetName(x=>x.Birthday)" type="text" v-model="birthdayStr" />
            </div>
            <div class="form-group">
                <label class="@fieldCssClass" for="workPlace">WorkPlace</label>
                <input class="@valueCssClass form-control" id="workPlace" 
                       name="@memberHelper.GetName(x=>x.WorkPlace)" type="text" v-model="workPlace" />
            </div>
            <div class="form-group">
                <label class="@fieldCssClass" for="workPosition">WorkPosition</label>
                <input class="@valueCssClass form-control" id="workPosition" 
                       name="@memberHelper.GetName(x=>x.WorkPosition)" type="text" v-model="workPosition" />
            </div>
            <div class="form-group">
                <label class="@fieldCssClass" for="homeAddress">HomeAddress</label>
                <input class="@valueCssClass form-control" id="homeAddress" 
                       name="@memberHelper.GetName(x=>x.HomeAddress)" type="text" v-model="homeAddress" />
            </div>
            <div class="form-group">
                <select class="select input form-control" data-component="input-change">
                    <option value="1">1</option>
                    <option value="2">2</option>
                    <option value="3">3</option>
                </select>
            </div>
            <div class="form-group @fieldCssClass">
                <input type="submit" class="btn btn-success" value="Отправить" />
            </div>
        </form>
    </div>
</fieldset>

@section Scripts{
    <script src="~/lib/jquery-validation/dist/jquery.validate.js"></script>
    <script src="~/js/jblocks.js"></script>
    <script src="~/js/components.js"></script>
    <script src="~/js/observer-monitor.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
    <script type="text/javascript">
        var model = JSON.parse('@Html.Raw(Json.Serialize(Model))');
        console.log(model);
        var app = new Vue({
            el: '#user',
            data: model,
            computed: {
                getFIO: function () { return `${this.lastName} ${this.firstName} ${this.middleName}` },
                getLogin: function () { return `${this.lastName}-1119` }
            }
        })

        //валидация jquery
        let strValid = {
            required: true,
            minlength: 2
        };

        let strValidMessage = function (fieldName) {
            return {
                required: `Поле '${fieldName}' обязательно к заполнению`,
                minlength: `Введите не менее 2-х символов в поле '${fieldName}'`
            }
        };

        $(function () {
            $('#form').validate({
                rules: {
                    lastName: strValid,
                    firstName: strValid,
                    middleName: strValid
                },
                messages: {
                    lastName: strValidMessage("Фамилия"),
                    firstName: strValidMessage("Имя"),
                    middleName: strValidMessage("Отчество")
                }
            });  

            /************** change of for last val and val ***********/
            var counter = jBlocks.get(document.querySelector('.select.input'));

            // use event to react on what happens during lifecycle
            counter.on('change', function (el) {
                console.log(el);
            });
            /**********************************************************/
            // prototype for replace all
            String.prototype.replaceAll = function (search, replace) {
                return this.split(search).join(replace);
            }

            /***************** use observer ***************************/
            console.log($('#form'));
            let server = new Observer(form, null, function (mutationsList, observerEl) {
                var text = "";
                for (let mutation of mutationsList) {
                    if (mutation.type === 'childList') {
                        text += "A child node has been added or removed."
                    } else if (mutation.type === 'attributes') {
                        text += `The ${mutation.attributeName} attribute was modified.`;
                    }
                    text += "<br/>";
                }
                console.log(text.replaceAll("<br/>",""));
                $("#alert-title").html(text);
                $('#alert-container').addClass("show");
            });
            /**********************************************************/

        });
    </script>
}
