@using WebVueTest.Controllers;
@using Microsoft.AspNetCore.Mvc.Localization
@inject IViewLocalizer Localizer

@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewData["Title"] = "Contacts";
}

<style>
    li.list-group-item {
        position: relative;
    }

        li.list-group-item .remove-item {
            position: absolute;
            right: 20px;
            font-size: 14pt;
            color: red;
            margin-top: 10px;
        }
</style>

<div id="main" class="row" v-cloak>
    <div class="col-3" style="max-height: 240px;overflow-y: auto;">
        <ul class="list-group pointer">
            <li class="list-group-item"
                v-for="item in contacts"
                v-bind:class="{ active: item.active }"
                v-bind:key="item.id"
                v-on:click="check(item.id)"
                v-bind:data-id="item.id">
                <span class="tooltip-el" v-bind:data-tooltip="item.phone">{{item.name}}</span>
                @*<i class="glyphicon glyphicon-remove remove-item"></i>*@
            </li>
        </ul>
    </div>
    <div class="col-6">
        <div class="card" style="width: 40rem;">
            <div class="card-body">
                <h5 class="card-title">{{checkContact.name || defNewModel}}</h5>
                <div class="input-group mb-3">
                    <div class="input-group-prepend">
                        <span class="input-group-text" id="basic-addon1">@Localizer["pName"]</span>
                    </div>
                    <input type="text" class="form-control" placeholder="@Localizer["pName"]"
                           aria-label="@Localizer["pName"]" aria-describedby="basic-addon1"
                           ref="name" v-model="checkContact.name" pattern="[А-Яа-яЁё]">
                </div>
                <div class="input-group mb-3">
                    <div class="input-group-prepend">
                        <span class="input-group-text" id="basic-addon1">@Localizer["pPhone"]</span>
                    </div>
                    <input type="text" class="form-control" placeholder="@Localizer["pPhone"]"
                           aria-label="@Localizer["pPhone"]" aria-describedby="basic-addon1" v-model="checkContact.phone">

                </div>
                <hr />
                <button class="btn btn-primary" v-bind:disabled="!valid" v-on:click="save(checkContact)">@Localizer["pBtnSave"]</button>
                <button class="btn btn-danger" v-show="checkContact.isNotNew" v-on:click="remove(checkContact)">@Localizer["pBtnDelete"]</button>
            </div>
        </div>
    </div>
    <div class="col-3">
        <div class="error" v-for="err in errors">
            <i>{{err}}</i>
            <hr />
        </div>
    </div>
</div>


@section Scripts{
    <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
    <script type="text/javascript">
        let url = '/api/Contact';
        let server = new Server();
        var app = new Vue({
            el: '#main',
            data: {
                defNewModel: '@Localizer["pNewContact"]',
                contacts: [],
                checkContact: {},
                errors: []
            },
            computed: {
                valid: function () {
                    if (this.checkContact.name
                        && this.checkContact.phone)
                        return true;
                }
            },
            methods: {
                check: function (id) {
                    this.checkContact.active = false;
                    if (this.checkContact.id == id) {
                        this.newContact();
                        return;
                    }
                    this.checkContact = this.contacts.find(x => x.id === id);
                    this.checkContact.isNotNew = this.checkContact.id > 0 ? true : false;
                    this.checkContact.active = true;
                },
                remove: async function (contact) {
                    try {
                        await server.requestJSONAsync(url, ApiMethods.delete, contact);
                        this.contacts = this.contacts.filter(x => x.id != contact.id);
                        this.newContact();
                    }
                    catch (err) {

                    }
                },
                save: async function (contact) {
                    contact.id = contact.id || 0;
                    try {
                        let method = contact.id < 1 ? ApiMethods.post : ApiMethods.put;
                        let result = await server.requestJSONAsync(url, method, contact);
                        if (result.status) {
                            console.warn(result.status, result.valid);
                            this.errors = [];
                            for (let key in result.valid) {
                                this.errors.push(result.valid[key][0]);
                                console.warn(result.valid[key][0]);
                            }
                            return;
                        }
                        if (contact.id < 1) {
                            contact.id = result;
                            this.contacts.push(contact);
                        }
                    }
                    catch (err) {
                        console.error(err);
                        return;
                    }

                    setTimeout(() => {
                        let el = $(`.list-group-item[data-id=${contact.id}]`);
                        el[0].scrollIntoView({ block: "center", behavior: "smooth" });
                    }, 400);
                    this.newContact();
                },
                newContact: function () {
                    this.checkContact = {};
                    $(this.$refs.name).focus();
                }
            },
            mounted: async function () {
                this.contacts = await server.requestJSONAsync(url, ApiMethods.get);
                this.newContact();
            }
        });
    </script>
}